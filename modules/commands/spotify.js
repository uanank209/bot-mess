const axios = require("axios");
const fs = require("fs");
const path = require("path");

module.exports.config = {
  name: "spotify",
  version: "1.0.1",
  hasPermssion: 0,
  credits: "DongDev",
  description: "T√¨m ki·∫øm v√† t·∫£i nh·∫°c tr√™n Spotify",
  commandCategory: "T√¨m ki·∫øm",
  usages: "[]",
  images: [],
  cooldowns: 2,
};

async function searchSpotify(keywords, limit = 7) {
  try {
    const res = await axios.get(`https://subhatde.id.vn/spotify?q=${encodeURI(keywords)}`);
    return res.data.slice(0, limit); // Gi·ªõi h·∫°n k·∫øt qu·∫£ t√¨m ki·∫øm
  } catch (error) {
    console.error(error.response ? error.response.data : error.message);
    throw error;
  }
}

async function downloadSpotify(url) {
  try {
    const res = await axios.get(`https://subhatde.id.vn/spotify/down?url=${encodeURI(url)}`);
    return res.data;
  } catch (error) {
    console.error(error.response ? error.response.data : error.message);
    throw error;
  }
}

module.exports.run = async function ({ api, event, args }) {
  try {
    const keyword = args.join(" ");

    if (!keyword) {
      api.sendMessage("‚ö†Ô∏è Vui l√≤ng nh·∫≠p t·ª´ kh√≥a ƒë·ªÉ t√¨m nh·∫°c tr√™n Spotify", event.threadID, event.messageID);
      return;
    }

    const dataSearch = await searchSpotify(keyword);

    if (dataSearch.length === 0) {
      api.sendMessage(`‚ùé Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ n√†o cho t·ª´ kh√≥a: ${keyword}`, event.threadID, event.messageID);
      return;
    }

    const img = dataSearch.map(t => t.thumbnail);
    const image = [];
    for (let i = 0; i < img.length; i++) {
      const stream = (await axios.get(img[i], { responseType: "stream" })).data;
      image.push(stream);
    }

    const messages = dataSearch.map((item, index) => {
      return `\n${index + 1}. ${item.title} - ƒê·ªô ph·ªï bi·∫øn: ${item.popularity} - Th·ªùi gian: ${item.duration}`;
    });

    const listTrack = {
      body: `\n${messages.join("\n")}\n\nüìå Reply (ph·∫£n h·ªìi) theo STT t∆∞∆°ng ·ª©ng ƒë·ªÉ t·∫£i nh·∫°c`,
      attachment: image,
    };

    api.sendMessage(listTrack, event.threadID, (error, info) => {
      global.client.handleReply.push({
        type: "choose",
        name: module.exports.config.name,
        author: info.senderID,
        messageID: info.messageID,
        dataTrack: dataSearch,
      });
    });
  } catch (error) {
    console.error(error);
    api.sendMessage("L·ªói: " + error.message, event.threadID);
  }
};

module.exports.handleReply = async function ({ event, api, handleReply }) {
  const { threadID: tid, body } = event;

  if (handleReply.type === 'choose') {
    const choose = parseInt(body);

    if (isNaN(choose)) {
      return api.sendMessage('‚ö†Ô∏è Vui l√≤ng nh·∫≠p 1 con s·ªë h·ª£p l·ªá', tid);
    }

    if (choose > handleReply.dataTrack.length || choose < 1) {
      return api.sendMessage('‚ùé L·ª±a ch·ªçn kh√¥ng n·∫±m trong danh s√°ch', tid);
    }

    const chosenItem = handleReply.dataTrack[choose - 1];

    api.sendMessage(`üîÑ ƒêang t·∫£i xu·ªëng b√†i h√°t "${chosenItem.title}"...`, tid);

    try {
      const downloadData = await downloadSpotify(chosenItem.url);

      if (downloadData.success) {
        const filePath = path.resolve(__dirname, `${chosenItem.title}.mp3`);

        // Download v√† l∆∞u file MP3 t·ª´ link downloadUrl
        const writer = fs.createWriteStream(filePath);
        const response = await axios({
          url: downloadData.downloadUrl,
          method: 'GET',
          responseType: 'stream'
        });

        response.data.pipe(writer);

        writer.on('finish', () => {
          api.sendMessage({
            body: `üéß ƒêang ph√°t: ${downloadData.title}\n‚Ä¢ Ngh·ªá sƒ©: ${downloadData.artist}\n‚Ä¢ Album: ${downloadData.album}\n‚Ä¢ Ng√†y ph√°t h√†nh: ${downloadData.released}`,
            attachment: fs.createReadStream(filePath)
          }, tid, (err, info) => {
            if (!err) {
              // G·ª° tin nh·∫Øn sau 10 gi√¢y
              setTimeout(() => {
                api.unsendMessage(handleReply.messageID); // G·ª° tin nh·∫Øn k·∫øt qu·∫£ t√¨m ki·∫øm
              }, 10000);

              // X√≥a file sau khi g·ª≠i
              fs.unlinkSync(filePath);
            }
          });
        });

        writer.on('error', () => {
          api.sendMessage('‚ùå C√≥ l·ªói x·∫£y ra khi t·∫£i file √¢m thanh. Vui l√≤ng th·ª≠ l·∫°i sau.', tid);
        });

      } else {
        api.sendMessage('‚ùé Kh√¥ng th·ªÉ t·∫£i b√†i h√°t n√†y. Vui l√≤ng th·ª≠ l·∫°i sau.', tid);
      }
    } catch (error) {
      console.error(error);
      api.sendMessage('‚ùå ƒê√£ x·∫£y ra l·ªói khi t·∫£i xu·ªëng. Vui l√≤ng th·ª≠ l·∫°i.', tid);
    }
  }
};
