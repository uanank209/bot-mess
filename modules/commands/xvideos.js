const axios = require("axios");
const fs = require("fs");
const path = require("path");

module.exports.config = {
    name: "xvideos",
    version: "1.0.0",
    hasPermssion: 0,
    credits: "D≈©ngkon",
    description: "T√¨m ki·∫øm v√† t·∫£i video tr√™n Xvideos",
    commandCategory: "T√¨m ki·∫øm",
    usages: "search",
    cooldowns: 5,
    dependencies: {
        "axios": "",
        "fs": ""
    }
};

module.exports.run = async function ({ api, event, args, Currencies, Users }) {
    const { threadID, senderID, messageID } = event;
    var data = await Currencies.getData(event.senderID);
    const out = (msg) => api.sendMessage(msg, threadID);

    if (!args.join(" ")) return out("Thi·∫øu T·ª´ Kho√° C·∫ßn T√¨m Ki·∫øm ");
    const search = args.join(" ");
    const attachments = [];
    const dungkon = [];

    try {
        const res = (await axios.get(`https://deku-rest-api.gleeze.com/prn/search/${encodeURIComponent(search)}`)).data;
        const data = res.result;

        if (!data || data.length === 0) {
            return api.sendMessage("Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ n√†o.", threadID);
        }

        for (let i = 0; i < Math.min(10, data.length); i++) {
            const video = data[i];
            const message = `ID: ${i + 1}.\nüìùTi√™u ƒë·ªÅ: ${video.title}\nTh·ªùi gian: ${video.duration}\nüîóLi√™n k·∫øt: ${video.video}\nüìúTh√¥ng tin\n     -Ng∆∞·ªùi ƒëƒÉng: ${video.uploaderName}\n    -Link Profile: ${video.uploaderProfile}\n‚ä± ‚ãÖ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ ‚ãÖ ‚ä∞`;
            dungkon.push(message);

            if (video.thumbnail) {
                const thumbnailPath = path.join(__dirname, `cache/${i + 1}.jpg`);
                const response = await axios.get(video.thumbnail, { responseType: 'arraybuffer' });
                fs.writeFileSync(thumbnailPath, Buffer.from(response.data));
                attachments.push(fs.createReadStream(thumbnailPath));
            }
        }

        // G·ª≠i t·∫•t c·∫£ th√¥ng tin v√† ·∫£nh trong m·ªôt l·∫ßn
        api.sendMessage(
            {
                body:"[T√åM KI·∫æM VIDEO TR√äN XVIDEOS]\n" + dungkon.join("\n\n") + "\n\n¬ª H√£y reply(ph·∫£n h·ªìi) ch·ªçn m·ªôt trong nh·ªØng t√¨m ki·∫øm tr√™n (video d∆∞·ªõi 10p)",
                attachment: attachments
            },
            threadID,
            (error, info) => {
                global.client.handleReply.push({
                    name: module.exports.config.name,
                    author: senderID,
                    messageID: info.messageID,
                    result: data,
                    attachment: attachments,
                });
            }
        );
    } catch (error) {
        api.sendMessage("L·ªói: " + error.message, threadID);
        console.error("ƒê√£ x·∫£y ra l·ªói:", error); // Log ra t√¨m l·ªói
    }
};

module.exports.handleReply = async function ({ event, api, Currencies, Users, handleReply }) {
    const { threadID, messageID, body, senderID } = event;

    // Ki·ªÉm tra xem ng∆∞·ªùi reply c√≥ ph·∫£i l√† ng∆∞·ªùi d√πng l·ªánh kh√¥ng
    if (senderID !== handleReply.author) {
        return api.sendMessage("B·∫°n kh√¥ng ph·∫£i ng∆∞·ªùi d√πng l·ªánh", threadID, messageID);
    }

    const choose = parseInt(body.trim());

    api.unsendMessage(handleReply.messageID);
    if (isNaN(choose)) {
        return api.sendMessage("‚ö†Ô∏è Vui l√≤ng nh·∫≠p 1 con s·ªë", threadID, messageID);
    }
    if (choose > handleReply.result.length || choose < 1) {
        return api.sendMessage("‚ùé L·ª±a ch·ªçn kh√¥ng n·∫±m trong danh s√°ch", threadID, messageID);
    }

    const chosenVideo = handleReply.result[choose - 1];
    api.sendMessage(`S·∫Ω m·∫•t 1 kho·∫£ng th·ªùi gian (1-5p) ƒë·ªÉ t·∫£i video, ${(await Users.getData(event.senderID)).name} vui l√≤ng ƒë·ª£i`, event.threadID, (err, info) => setTimeout(() => { api.unsendMessage(info.messageID); }, 10000)); // t·ª± ƒë·ªông g·ª° tin nh·∫Øn sau 20 gi√¢y 

    try {
        const res = await axios.get(`https://joshweb.click/prn/download?url=${encodeURIComponent(chosenVideo.video)}`);
        const response = res.data.result;
        const description = response.description;
        const uploadDate = response.uploadDate;
        const title = response.name;

        // Ki·ªÉm tra xem contentUrl c√≥ thu·ªôc t√≠nh HD_Quality kh√¥ng
        const videoUrl = response.contentUrl?.HD_Quality;

        if (!videoUrl) {
            return api.sendMessage("Kh√¥ng t√¨m th·∫•y URL video ch·∫•t l∆∞·ª£ng HD.", threadID, messageID);
        }

        // Ki·ªÉm tra dung l∆∞·ª£ng video
        const headRes = await axios.head(videoUrl);
        const contentLength = headRes.headers['content-length'];

        if (contentLength > 24 * 1024 * 1024) { // 24MB
            return api.sendMessage("Video v∆∞·ª£t qu√° dung l∆∞·ª£ng 24MB v√† kh√¥ng th·ªÉ t·∫£i xu·ªëng.", threadID, messageID);
        }

        const filePath = path.join(__dirname, `cache/${title.replace(/[^\w\s]/gi, '')}.mp4`);

        const videoResponse = await axios.get(videoUrl, { responseType: "arraybuffer" });
        fs.writeFileSync(filePath, Buffer.from(videoResponse.data));

        api.sendMessage(
            {
                body: `[T·∫¢I VIDEO XVIDEOS]\nTi√™u ƒë·ªÅ: ${title}\nM√¥ t·∫£: ${description}\nTh·ªùi gian ƒëƒÉng t·∫£i: ${uploadDate}\nL∆ØU √ù; T·ª∞ ƒê·ªòNG G·ª† VIDEO SAU 10S`,
                attachment: fs.createReadStream(filePath)
            },
            threadID,
            (error, info) => {
                if (error) return console.error(error);
                // T·ª± ƒë·ªông g·ª° tin nh·∫Øn sau 1 ph√∫t
                setTimeout(() => { api.unsendMessage(info.messageID); }, 60000); // 60000 ms = 1 ph√∫t
                fs.unlinkSync(filePath);
            },
            messageID
        );
    } catch (error) {
        console.error("Error:", error.message);
        api.sendMessage("ƒê√£ x·∫£y ra l·ªói khi t·∫£i video.", threadID, messageID);
    }
};